<beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:mvc="http://www.springframework.org/schema/mvc"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">
	

	<!-- 对用注解的Handler可以单个配置
		实际开发中建议组件扫描
	 -->
	 <!-- 可以扫描controller、service..... 这个由web的xml加载-->
	 <context:component-scan base-package="lyn.ssm.controller"/>
	

	<!-- 静态资源的解析(js、css、img...) restful地址请求需要配置这个-->
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/jslib/" mapping="/jslib/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/>
	
	<!-- 注解的处理器映射器 
	3.1之前：org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class
	3.1之后：org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class
	-->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" /> -->
	
	<!-- 注解的处理器适配器 
	3.1之前：org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.class
	3.1之后：org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.class
	-->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" /> -->
	
	<!-- 使用mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多参数绑定方法，比如json转换解析器默认就加载了，使用此种方法，上边的注解适配器
	和注解映射器则无需配置
	 -->
	<mvc:annotation-driven conversion-service="conversionService"
	 validator="validator"></mvc:annotation-driven>
	
	<!-- 视图解析器 
		解析jsp视图，默认使用jstl标签，classpath下面需要有jstl的包
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 不配置默认使用jstl标签 -->
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> -->
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型的转换器  -->
				<bean class="lyn.ssm.controller.converter.CustomDateConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 指定校验使用的资源文件，在文件中配置校验的错误信息 ，如果不指定则默认使用classpath下的ValidationMessage.properties -->
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessage</value>
			</list>
		</property>
	
		<!-- 资源文件的编码格式 -->
		<property name="fileEncodings" value="utf-8"/>
		<!-- 对资源文件的缓存时间 单位秒 -->
		<property name="cacheSeconds" value="120"/>
	</bean>
	
	<!-- 全局异常处理类
		只要实现HandlerExceptionResolver这个接口就是全局异常处理类，如果写多个 只有一个生效
	 -->
	 <bean class="lyn.ssm.controller.exception.CustomExceptionResolver"/>
	 
	 <!-- 文件上传解析器 -->
	 <bean id="multipartResolver"
	  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<!-- 设置文件上传的最大尺寸 -->
	 	<property name="maxUploadSize">
	 		<value>5242880</value>
	 	</property>
	 </bean>
	 
	 <mvc:interceptors>
	 	<!-- 登录拦截器 -->
	 	<!-- <mvc:interceptor >
	 		<mvc:mapping path="/**"/>
	 		<bean class="lyn.ssm.interceptor.LoginInterceptor"/>
	 	</mvc:interceptor> -->
	 
	 	<!-- 多个拦截器，顺序执行 -->
	 	<mvc:interceptor >
	 		<!-- /**表示拦截所有URL包括子路径；/*表示不拦截子路径 -->
	 		<mvc:mapping path="/**"/>
	 		<bean class="lyn.ssm.interceptor.HandlerInterceptor1"/>
	 	</mvc:interceptor>
	 	
	 	<mvc:interceptor >
	 		<mvc:mapping path="/**"/>
	 		<bean class="lyn.ssm.interceptor.HandlerInterceptor2"/>
	 	</mvc:interceptor>
	 </mvc:interceptors>
</beans>