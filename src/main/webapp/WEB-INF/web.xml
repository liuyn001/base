<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name></display-name>
  
  	<!-- spring配置文件位置 -->
	<!-- <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/spring.xml,classpath:spring/springmvc.xml,classpath:spring/applicationContext-dao.xml,classpath:spring/applicationContext-transaction.xml</param-value>
	</context-param> -->
	
	<!-- mybatis=========================开始=================================== -->
	<!-- mybatis=========================结束=================================== -->
	
	
	<!-- mybatis=========================开始=================================== -->
	<!-- 加载spring的容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/spring/*.xml</param-value>
	</context-param>
	<!-- mybatis=========================结束=================================== -->
	
	<!-- log4j日志配置 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.properties</param-value>
	</context-param>
	
	<!-- spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>	
	
	<!-- 修复数据库监听器 -->
	<listener>
		<listener-class>lyn.ssh.listener.RepairListener</listener-class>
	</listener>
	
	
	<!-- openSessionInView配置 -->
	<filter>
		<filter-name>openSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>openSessionInViewFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	
	<!-- Struts2配置 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	
	<!-- mybatis=========================开始=================================== -->
	<!-- 配置前端控制器 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation：配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置默认加载web-info下面的servlet名称-servlet.xml(springmvc-servlet.xml) -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 这里会验证controller的组件扫描，如果没有配置，将找不到controller中的方法 -->
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 第一种：*.action,访问以*.action结尾 由DispatcherServlet进行解析 第二种:/,表示所有地址都有DispatcherServlet进行解析，对于静态的资源的解析需要配置不让DispatcherServlet解析 
			使用此种方式可以实现RESTful风格的url 第三种：/*,这种配置有问题，使用这种配置要最终要转发打一个jsp页面时，仍有DispatcherServlet解析jsp地址，会报错 -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>


	<!-- 配置前端控制器 rest方式配置 -->
	<servlet>
		<servlet-name>spring_mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation：配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置默认加载web-info下面的servlet名称-servlet.xml(springmvc-servlet.xml) -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>spring_mvc</servlet-name>
		<!-- 第一种：*.action,访问以*.action结尾 由DispatcherServlet进行解析 第二种:/,表示所有地址都有DispatcherServlet进行解析，对于静态的资源的解析需要配置不让DispatcherServlet解析 
			使用此种方式可以实现RESTful风格的url 第三种：/*,这种配置有问题，使用这种配置要最终要转发打一个jsp页面时，仍有DispatcherServlet解析jsp地址，会报错 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- mybatis=========================结束=================================== -->
	
	<!-- 连接池 启用 Web 监控统计功能    start-->  
  <filter>  
     <filter-name>DruidWebStatFilter</filter-name>  
     <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>  
     <init-param>  
         <param-name> exclusions </param-name>  
         <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid /*</param-value>  
     </init-param>  
  </filter>  
  <filter-mapping>  
     <filter-name>DruidWebStatFilter</filter-name>  
     <url-pattern>/*</url-pattern>  
  </filter-mapping>  
  <servlet>  
     <servlet-name>DruidStatView</servlet-name>  
     <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>  
  </servlet>  
  <servlet-mapping>  
     <servlet-name>DruidStatView</servlet-name>  
     <url-pattern>/druid/*</url-pattern>  
  </servlet-mapping>  
  <!-- 连接池 启用 Web 监控统计功能    end-->  
	
	<!-- 字符集编码配置 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
  <welcome-file-list>
    <welcome-file>/index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
